import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	int[][] direction = new int[][] { { -1, 0 }, { 0, 1 }, { 1, 0 }, { 0, -1 } };
	// 북, 동, 남, 서

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.robot();
	}

	public void robot() throws IOException {
		/*input data 가공 start*/
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer nm = new StringTokenizer(br.readLine(), " ");
		int rows = Integer.parseInt(nm.nextToken());
		int cols = Integer.parseInt(nm.nextToken());

		int[][] map = new int[rows][cols];
		boolean[][] visited = new boolean[rows][cols];

		StringTokenizer strtInfo = new StringTokenizer(br.readLine(), " ");
		int r = Integer.parseInt(strtInfo.nextToken());
		int c = Integer.parseInt(strtInfo.nextToken());
		int startDirection = Integer.parseInt(strtInfo.nextToken());

		for (int i = 0; i < rows; i++) {
			StringTokenizer line = new StringTokenizer(br.readLine(), " ");
			for (int j = 0; j < cols; j++) {
				map[i][j] = Integer.parseInt(line.nextToken());
			}
		}
		/*input data 가공 end*/
		
		//1.시작점 청소
		int curR = r;
		int curC = c;
		int curDirection = startDirection;
		visited[curR][curC] = true;
		
		
		//2.청소할 다음 위치를 계속 찾는 작업.
		while (true) {
			
			boolean noWay = true; //4방면 모두 청소할 수 없는 공간인지 판단하는 변수. 
			
			/*
			 * 2-1. 청소를 이미 한 현 지점에서 방향을 기준으로 왼쪽부터 4방면 탐색.
			 * direction을 [북,동,남,서]로 지정했고, curDirection이 direction배열의 index임.
			 * 또한 index가 작아지는 방향이 왼쪽 방향임. 
			 * 
			*/
			for (int i = curDirection - 1; i >= curDirection - 4; i--) {
				int tmpDirection = i < 0 ? i + 4 : i;
				int[] move = direction[tmpDirection];
				int nextR = curR + move[0];
				int nextC = curC + move[1];

				/*
				 * 2-2. 4방면을 탐색하던 중, 이미 청소하지 않았고 빈 공간이라면 위치를 이동시키고 방향도 그 방향으로 바꿈. 
				 */
				if (map[nextR][nextC] == 0 && visited[nextR][nextC] == false) {
					visited[nextR][nextC] = true;
					curR = nextR;
					curC = nextC;
					curDirection = tmpDirection;
					noWay = false; //4방면 중 청소할 공간을 찾은 것이므로 false 지정. 
					
					break;
				}
			}

			/*
			 * 2-3. 4방면 모두 청소할 수 없는 공간이라면, 
			 * 방향은 그대로, 후진함. 
			 * */
			if (noWay) {
				int backDirection = curDirection - 2;
				backDirection = backDirection < 0 ? backDirection + 4 : backDirection;
				int[] move = direction[backDirection];
				curR = curR + move[0];
				curC = curC + move[1];

				/*
				 * 2-4. 만약 후진한 곳이 벽이면 이 while문을 종료함. 
				 * */ 
				
				if (map[curR][curC] == 1) {
					break;
				}
			}
		}

	    // 3.visited true 인 것 갯수 세기.
		int result = 0;
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				if (visited[i][j]) {
					result++;
				}
			}
		}

		System.out.println(result);
	}
}
